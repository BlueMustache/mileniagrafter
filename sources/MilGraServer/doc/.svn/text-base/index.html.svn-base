<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Milenia Grafter Server</title>
<style type="text/css">
<!--
body {
	margin-left: 0px;
	margin-top: 0px;
	margin-right: 0px;
	margin-bottom: 0px;
	background-color: #4A86FF;
}
body, td, th {
	font-family: Arial, Helvetica, sans-serif;
	color: #000066;
	font-size: 12px;
}
a:link {
	color: #000066;
}
a:visited {
	color: #000066;
}
a:hover {
	color: #000066;
}
a:active {
	color: #000066;
}
-->
</style>
<meta name="Keywords"
  content="Milenia Grafter Server MilGra Open Source Flash Media RTMP AMF Live Stream Streaming Sex Drugs Rock and Roll Shine Success FLV Sorenson on2 VP6 mp4"
  />
<script type="text/javascript"
  src="http://www.google-analytics.com/urchin.js">
 </script>
<script type="text/javascript">
_uacct = "UA-3157879-1";
urchinTracker();</script>
<script src="Scripts/AC_ActiveX.js" type="text/javascript"></script>
<script src="Scripts/AC_RunActiveContent.js" type="text/javascript"></script>
</head>
<body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tbody>
    <tr>
      <td align="left" valign="top"> </td>
      <td align="left" bgcolor="#cee4f7" valign="top" width="800"><table style="width: 800px; height: 100%;" border="0" cellpadding="0"
        cellspacing="0">
          <tbody>
            <tr>
              <td height="558" width="109"><img
                src="images/verticallogotop.jpg" alt="" height="558"
                width="109" /></td>
              <td rowspan="2" align="left" valign="top"><blockquote> | <a href="news.html">News</a> | <a href="articles.html">Articles</a> | <a href="forum">Forum</a> | <a href="index.html">Grafter</a> | <a href="ground.html">Ground</a> | <a href="effects.html">Effects</a> | <a href="flashlv.html">Flashlv</a> | <a href="archiver.html">Archiver</a> | <a href="killer.html">Killer</a> |
                  <a href="swarm.html">Swarm</a> | <a href="impressum.html">Impressum</a> | 
                  <hr noshade="noshade" size="1" />
                  <p><strong>Milenia Grafter Server<br />
                    </strong>The 64 Kbyte Flash Media Server <br />
                    Copyright © 2007-2008 by Milan Toth</p>
                  <p>If you want to speed up my development process,
                    donate.</p>
                  <form action="https://www.paypal.com/cgi-bin/webscr"
                  method="post">
                    <input name="cmd" value="_s-xclick" type="hidden" />
                    <input
                    src="https://www.paypal.com/en_US/i/btn/x-click-but04.gif"
                    name="submit"
                    alt="Make payments with PayPal - it's fast, free and secure!"
                    type="image" />
                    <img alt=""
                    src="https://www.paypal.com/en_US/i/scr/pixel.gif"
                    border="0" height="1" width="1" />
                    <input
                    name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----"
                    type="hidden" />
                  </form>
                  <p><a href="news.html">Check out the latest news.</a><br />
                      <a href="http://groups.google.com/group/milenia-grafter" target="_blank">Subscribe to the developer group.</a><br />
                    <a href="http://code.google.com/p/milgra/source/checkout" target="_blank">Check out the source from the repository.</a><br />
                    <a href="http://groups.google.com/group/milenia-grafter" target="_blank"></a></p>
                  <p><strong>Download:</strong></p>
                  <ul>
                    <li><a
                      href="http://milgra.com/downloads/milgra0.8b.zip">Milenia
                      Grafter 0.8 beta, 06.04.2008</a> ( not yet )<br />
                    </li>
                    <li> <a href="http://milgra.com/downloads/milgra0.5b.zip">Milenia
                      Grafter 0.5 beta, 25.10.2007</a><br />
                    </li>
                  </ul>
                  <hr noshade="noshade" size="1" />
                  <p><a href="#1"><strong>1. Introduction</strong></a></p>
                  <blockquote>
                    <p> <a href="#11">1.1 Overview</a><br />
                      <a href="#12">1.2 Features</a><br />
                      <a href="#13">1.3 Sytem Requirements</a><br />
                      <a href="#14">1.4 Performance</a><br />
                      <a href="#15">1.5 License</a></p>
                  </blockquote>
                  <p>                    <a href="#2"><strong>2. Running the server</strong></a></p>
                  <blockquote>
                    <p>                      <a href="#21">2.1 Overview</a><br />
                      <a href="#22">2.2 Parameters</a><br />
                      <a href="#23">2.3 Admin console</a><br />
                      <a href="#24">2.4 Stress test</a><br />
                      <a href="#25">2.5 Unit test</a><br />
                    </p>
                  </blockquote>
                  <p>                    <a href="#3"><strong>3. Programming the server</strong></a></p>
                  <blockquote>
                    <p><a href="#31">3.1 Overview</a><br />
                      <a href="#32">3.2 IApplication</a><br />
                      <a href="#33">3.3 Client class</a><br />
                      <a href="#34">3.4 Stream class</a><br />
                      <a href="#35">3.5 Wrapper classes</a><br />
                      <a href="#36">3.6 InvokeEvent</a><br />
                      <a href="#37">3.7 StreamEvent</a><br />
                      <a href="#38">3.8 StatusEvent</a><br />
                      <a href="#39">3.9 Utilities</a></p>
                  </blockquote>
                  <p>                    <a href="#4"><strong>4. Development howtos</strong></a></p>
                  <blockquote>
                    <p><a href="#41">4.1 How to create a Custom Application?</a><br />
                      <a href="#42">4.2 How to ember Milenia in my package?</a><br />
                      <a href="#43">4.3 How to modify/develop Milenia Grafter?</a></p>
                  </blockquote>
                  <hr noshade="noshade" size="1" />
                  <p><strong><a name="1" id="1"></a>1. Introduction</strong></p>
                  <blockquote>
                    <p><strong><a name="11" id="11"></a>1.1 Overview</strong></p>
                    <blockquote>
                      <p align="justify">                      Milenia Grafter Server is an open source flash media server that just works. With Milenia you don't have to know dozens of frameworks and tricks to create custom applications, you don't have to read up thousands of lines of configuration xml's to configure your server properly, you don't have to tear your hair off because of magic mistakes and unexpected errors coming from a closed source application, you don't have to wait for the never-coming answers of water-headed corporations, you don't have to pay thousands of dollars/euros for poorly performing enterprise level products. Simplicity was the only keyword during its creation, so i have not implemented any useless features from other flash media server implementations.</p>
                    </blockquote>
                    <p><strong><a name="12" id="12"></a>1.2 Features</strong></p>
                    <blockquote>
                      <p>Live Audio/Video streaming<br />
                        Live Audio/Video recording<br />
                        Recorded FLV playback<br />
                        FLV playback speed set - slow/fast, forward/reverse<br />
                        Stream access control based on stream events<br />
                        Simple and fast custom application deployment<br />
                        Lightweight data communication<br />
                        Client mode - you can connect Milenia to any kind of flash media server- clustering<br />
                        Stream pushing/pulling to/from other servers ( publish/play )<br />
                        Built-in bandwidth test - bidirectional and accurate, not like in fms3<br />
                        Sample access enabled<br />
                        Fast as light, solid as rock!<br />
                        Admin console<br />
                        Stress tester<br />
                        Unit tester</p>
                    </blockquote>
                    <p><strong>Future Features:</strong></p>
                    <blockquote>
                      <p>Application scopes, improved API ( shutdown , id ) ( 0.8 final )<br />
                        Adobe live encoder integration ( 0.9 )<br />
                        H264 capability ( 1.0 )<br />
                        RTMPE support ( 1.0 )</p>
                    </blockquote>
                    <p><strong><a name="13" id="13"></a>1.3 System Requirements:</strong></p>
                    <blockquote>
                      <p>Any system with Java Virtual Machine 1.5</p>
                    </blockquote>
                    <p><strong><a name="14" id="14"></a>1.4 Performance</strong></p>
                    <p><strong><a name="15" id="15"></a>1.5 The license</strong></p>
                    <blockquote>
                      <p align="justify">Milenia Grafter Server is licensed under General Public License v2. If you really badly need Milenia in your LGPL project, contact me and i provide you the rights.Copyright (c) 2007-2008 by Milan Toth. All rights reserved.This program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public Licenseas published by the Free Software Foundation; either version 2of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program; if not, write to the Free SoftwareFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
                    </blockquote>
                    <p align="justify">1.6 Kind donators</p>
                    <blockquote>
                      <p align="justify">Apakian Pty.Ltd<br />
                      Reinhard &amp; Löw GbR</p>
                    </blockquote>
                    </blockquote>
                  <p><strong><a name="2" id="2"></a>2. Running the server</strong></p>
                  <blockquote>
                    <p><strong><a name="21" id="21"></a>2.1 Overview</strong></p>
                    <blockquote>
                      <p align="justify">Milenia doesn't need installation, since it's one single ( 64 Kbtye length ) java jar file, you simply execute it with the java virtual machine. First you have to be sure that your system has Java Runtime Environment 1.5 or higher. If not, download it from sun. If you have it, simply type java -jar milgra.jar in the command line, and it should show up the version info and the parameter hints.The basic server package looks like this:applications &lt;DIR&gt;streams &lt;DIR&gt;sources &lt;DIR&gt;milgra.jarlicense.txt&quot;applications&quot; is the default custom application directory for the server. You have to copy your custom application jars here. &quot;streams&quot; is the default directory for streams, Milenia saves recorded stream here. &quot;sources&quot; contains the sources and the compiled admin application also. &quot;milgra.jar&quot; is the server itself, &quot;license.txt&quot; is the GPL v2 license. </p>
                    </blockquote>
                    <p><strong><a name="22" id="22"></a>2.2 Parameters</strong></p>
                    <blockquote>
                      <p align="justify"><em>start</em></p>
                      <p align="justify">starts the server on the default port ( 1935 ) </p>
                      <p align="justify"><em>stop</em></p>
                      <p align="justify">stops the server on the default port ( 1935 )</p>
                      <p align="justify"><em>port</em> [number]</p>
                      <p align="justify">sets the listener port to given number </p>
                      <p align="justify"><em>iostep</em> [number] </p>
                      <p align="justify">sets the io process stepping delay in milisecs. Default is 15</p>
                      <p align="justify"><em>iothreads</em> [number]</p>
                      <p align="justify">sets the thread counts of process groups. If your server isn't under a heavy load, or you want other services to run on your machine, one thread is enough. But if you have a multi-processored multi-cored monster, you can start experimenting with this setting and the stress tester. It won't speed up data throughput since only one process can reach the system bus and the sockets at a time, but it fastens stream pushing between threads, and data processing also.</p>
                      <p align="justify"><em>streams</em> [directory] </p>
                      <p align="justify">sets the stream directory where milenia stores/reads up streams. The directory will be created under the directory where milgra.jar is</p>
                      <p align="justify"><em>applications</em> [directory]</p>
                      <p align="justify">sets the custom application directory where milenia looks for custm applications. The directory will be created under the directory where milgra.jar is.</p>
                      <p align="justify">examples:</p>
                      <p align="justify">The following command starts the server listeneing on port 80, with 20 milliseconds of io stepping and with the default stream directory &quot;mystreams&quot;</p>
                      <p align="justify"><em>java -jar milgra.jar start port 80 iostep 20 streams mystreams</em></p>
                      <p align="justify">The following command stops the server listening on port 80</p>
                      <p align="justify"><em>java -jar milgra.jar stop port 80</em></p>
                      <p align="justify">For performance tuning you may have to use additional java virtual machine switches, for example, </p>
                      <p align="justify"><em>- server</em></p>
                      <p align="justify">or if jvm runs out of memory </p>
                      <p align="justify"><em>-Xmn -Xms -Xmx</em> to set memory size. </p>
                      <p align="justify">The following command starts Milenia with default settings with 500 megabytes of maximum memory usage.</p>
                      <p align="justify"><em>java -Xmx500M -jar milgra.jar start</em></p>
                    </blockquote>
                    <p><strong><a name="23" id="23"></a>2.3 Admin Console</strong></p>
                    <blockquote>
                      <p align="justify">To use the admin console, ensure that the server-side application ( admin.jar ) is under the Milenia's custom application directory, and the server is running.Open admin.swf ( under sources directory by default ) in a web browser having Flash Player 9. For the first run type &quot;admin&quot; for both username and password.</p>
                      <p align="justify">Admin application creates a fourth directory called &quot;admin&quot; in Milenia's root for its config file and logs. I recommend to immediately set a new username/password in admin/config.xml, and you may define allowed ip addresses also.</p>
                      <p align="justify">In the console, you will see two main tabs, the Graphs and the Applications.</p>
                      <p align="justify">Graphs tab</p>
                      <p align="justify">After a succesful login, you will find yourself at the graphs tab. These graphs shows the i/o states of the server. &quot;Bandwidth&quot; shows the overall, incoming, and outgoing bandwidth in Megabits/second. &quot;Connected Clients&quot; shows the overall, passive and active client count on the server. Active clients are the clients created by a custom application to connect to other servers. &quot;Processing Threads&quot; shows socket, client and stream pool processing thread count,&quot; Execution Times&quot; show the average process execution times of the different thread pools.</p>
                      <p align="justify">Applications tab</p>
                      <p align="justify">You can check the available applications here. They consists of the custom applications under Milenia Grafter Server / applications directory, and the running applications ( if custom application jar has been removed from the directory, but the application hasn't been unloaded ). You can check the status, connected clients and bandwidth info of an application. You can refresh application list any time, this case Milenia will reread the applicaitons directory. You have to wait for the next refresh event to see the new list. You can unload/load applications by pressing load/unload buttons.<br />
                        Under applications tab, it will show one connected client ( you ) and one running application ( the admin application ).l<br />
                        I also encourage the use of jconsole if you want to receive really detailed information about your machine and jvm health status.</p>
                    </blockquote>
                    <p><strong><a name="24" id="24"></a>2.4 Stress Tester</strong></p>
                    <blockquote>
                      <p>You can test how much load the server can handle on your system with the Stress Test part of the console.<br />
                        If the server halts with a &quot;java heap space&quot; out of memory error, you have to give more memory to the virtual machine with, for example -Xmn100M -Xms500M -Xmx500M switches.</p>
                    </blockquote>
                    <p><strong><a name="25" id="25"></a>2.5 Unit tester</strong></p>
                    <blockquote>
                      <p>If you modified and want to test the server's source, or just want to check what milenia knows, you can start the unit tester client, and go through all the tests, it covers all functions of Milenia. </p>
                    </blockquote>
                  </blockquote>
                  <p><strong><a name="3" id="3"></a>3. Programming the server</strong></p>
                  <blockquote>
                    <p><strong><a name="31" id="31"></a>3.1 Overview</strong></p>
                    <blockquote>
                      <p align="justify">You can create custom applications or application packages for Milenia Grafter Server in Java. You simply have to create a jar package from your packages / classes, and copy it under Milenias custom application folder, and they are ready to use. Custom applications are dynamically loaded at startup and on the fly triggered from the admin console. Custom applications must not be in the classpath, otherwise jvm cannot reload them. </p>
                      <p align="justify">Development tip : always create a startup script, which compiles/packs your custom application in your workspace, then copies it under milenia, and starts up the server.</p>
                      <p align="justify">To reach Milenia's API, you have to use the API classes packed in Milenia.<br />
                        There are three main rules for a custom application:</p>
                      <p align="justify">1. The main class of your application must be called Application<br />
                        2. The main class of your application must be in a package called application<br />
                        3. The main class of your application must implement IApplication interface</p>
                      <p align="justify">You have to be careful on the server with threads, because various events can come from various threads, use synchronization when there can be concurrencies. </p>
                      <p align="justify">There is also an important thing for the client side : never forget to set AMF object encoding to AMF0 on the client side, because Milenia uses AMF0. </p>
                    </blockquote>
                    <p><strong><a name="32" id="32"></a>3.2 IApplication interface</strong> - com.milgra.server.api.IApplication</p>
                    <blockquote>
                      <p align="justify">You have to implement IApplication interface in the main class of your custom application. IApplication contains three main controller methods:</p>
                      <p align="justify"><strong>onClose</strong> ( )</p>
                      <p align="justify">The server will call it when the admin unloads this application from admin console during runtime. You have to define a complete cleanup code here to avoid memory leaks.</p>
                      <p align="justify"><strong>onEnter</strong> ( Client clientX , WrapperList argumentsX )</p>
                      <p align="justify">Client entering point, clientX is the client instance, messageX is the wrapperlist containing the arguments passed by the client. clientX will be in idle state, until you call the clientX.accept( ) or clientX.reject( ) methods.</p>
                      <p align="justify"><strong>onLeave</strong> ( Client clientX );</p>
                      <p align="justify">Client leaving point, do client-related cleanup here.</p>
                    </blockquote>
                    <p><strong><a name="33" id="33"></a>3.3 Client class</strong> - com.milgra.server.api.Client</p>
                    <blockquote>
                      <p align="justify">Client class contains client related properties and methods.</p>
                      <p align="justify">Constructor</p>
                      <p align="justify"><strong>public Client ( IApplication applicationX )</strong></p>
                      <p align="justify">You can create a new client instance with the constrcutor, attached to the given application. After creation, you can connect the client to a remote server, and exchange data, pull/push streams</p>
                      <p align="justify">Methods</p>
                      <p align="justify"><strong>public String getId ( )</strong></p>
                      <p align="justify">The unique identifier number of the client.</p>
                      <p align="justify"><strong>public String getIp( )</strong></p>
                      <p align="justify">The ip address of the client.</p>
                      <p align="justify"><strong>public String getAgent( )</strong></p>
                      <p align="justify">The player / server info of the client.</p>
                      <p align="justify"><strong>public String getReferrer( )</strong></p>
                      <p align="justify">The referrer of the client.</p>
                      <p align="justify"><strong>public Double getPing( )</strong></p>
                      <p align="justify">The ping rountrip time of the client.</p>
                      <p align="justify"><strong>public Double getBandIn( )</strong></p>
                      <p align="justify">The actual incoming bandwidth of the client in bytes per second.</p>
                      <p align="justify"><strong>public Double getbandOut( )</strong></p>
                      <p align="justify">The actual outgoing bandwidth of the client in bytes per second.</p>
                      <p align="justify"><strong>public long getBytesIn( )</strong></p>
                      <p align="justify">The received byte count by the server from this client</p>
                      <p align="justify"><strong>public long getBytesOut( )</strong></p>
                      <p align="justify">The sent byte count to this client</p>
                      <p align="justify"><strong>public void addStreamEventListener ( EventListener listenerX )</strong></p>
                      <p align="justify">You may add a stream event listener object to the client with this method.</p>
                      <p align="justify"><strong>public void addInvokeEventListener ( EventListener listenerX )</strong></p>
                      <p align="justify">You may add an invoke event listener object to the client with this method.</p>
                      <p align="justify"><strong>public void addStatusEventListener ( EventListener listenerX )</strong></p>
                      <p align="justify">You may add a status event listener object to the client with this method.</p>
                      <p align="justify"><strong>public HashMap &lt; Double , String &gt; getPlayers ( )</strong></p>
                      <p align="justify">Returns the list of streams played by the client</p>
                      <p align="justify"><strong>public HashMap &lt; Double , String &gt;getRouters ( )</strong></p>
                      <p align="justify">Returns the list of streams published by the client</p>
                      <p align="justify"><strong>public void call ( String invokeID )</strong></p>
                      <p align="justify">Invokes a method on client side without arguments</p>
                      <p align="justify"><strong>public void call ( String invokeID , Wrapper argumentX ) </strong></p>
                      <p align="justify">Invokes a method on client side with a wrapper as arguments</p>
                      <p align="justify"><strong>public void call ( String invokeID , WrapperList argumentX ) </strong></p>
                      <p align="justify">Invokes a method on client side with an wrapperlist as argument</p>
                      <p align="justify"><strong>public void callResult ( String invokeID , Wrapper argumentX ) </strong></p>
                      <p align="justify">If a responder for a specific function is defined on client side, you may pass back a result with this function</p>
                      <p align="justify"><strong>public void callResult ( String invokeID , WrapperList argumentsX )</strong></p>
                      <p align="justify">If a responder for a specific function is defined on client side, you may pass back a result with this function with a wrapperlist as an arguments</p>
                      <p align="justify">Passive mode only methods </p>
                      <p align="justify"><strong>public void accept ( ) </strong></p>
                      <p align="justify">Accepts the client</p>
                      <p align="justify"><strong>public void accept ( Wrapper wrapperX ) </strong></p>
                      <p align="justify">Accepts the client with a wrapper as acception info, the client receives it as the NetStatus event's info.applicaiton parameter</p>
                      <p align="justify"><strong>public void reject ( Wrapper wrapperX ) </strong></p>
                      <p align="justify">Rejects the client, you can pass a wrapper as rejection info, the client receives it as the NetStatus event's info.application parameter</p>
                      <p align="justify"><strong>public void detach ( ) </strong></p>
                      <p align="justify">Detaches the client from the server</p>
                      <p align="justify">Active mode only methods </p>
                      <p align="justify"><strong>public void connect ( String uriX , Wrapper argumentsX ) </strong></p>
                      <p align="justify">Connects the client to a remote server with address uriX, passing argumentX as connection object</p>
                      <p align="justify"><strong>public void connect ( String uriX , WrapperList argumentsX ) </strong></p>
                      <p align="justify">Connects the client to a remote server with address uriX, passing argumentsX as connection object</p>
                    </blockquote>
                    <p><strong><a name="34" id="34"></a>3.4 Stream class</strong> - com.milgra.server.api.stream</p>
                    <blockquote>
                      <p align="justify">Stream class contains stream related properties and methods. There are two types of stream on Milenia : incoming streams, which is published by clients or other servers, and outgoing streams, which are played by clients or pushed by the server. Incoming streams are represented by stream routers, outgoing streams by stream players. Both of them are represented by the stream class. However if stream instance is a stream player, you can only enable/disable/delete it, other methods aren't working on it.</p>
                      <p align="justify">                        Mileania's stream pool is shared, so every applicaiton can reach every stream published to the server.
                        You can publihs/record/play streams from clients without access control by default. If you want to control stream access, you have to define a stream event listener in your custom application, and add it to the client with client.addStreamEventListener. <br />
                        After this you will be notified about every NetStream.play and NetStream.publish event, and you have to enable or disable these requests.</p>
                      <p align="justify">Properties</p>
                      <p align="justify"><strong>public static final String PLAYER;</strong></p>
                      <p align="justify">player type identifier</p>
                      <p align="justify"><strong>public static finalString ROUTER;</strong></p>
                      <p align="justify">router type identifier</p>
                      <p align="justify"><strong>public String type;</strong></p>
                      <p align="justify">type of the stream, can be PLAYER or ROUTER</p>
                      <p align="justify"><strong>public Client client;</strong></p>
                      <p align="justify">owner of the stream, if stream has no owner, then null</p>
                      <p align="justify"><strong>public String name;</strong></p>
                      <p align="justify">name of the played/routed stream. router names are unique, but multiple players can have the same name, when they are playing the same stream.</p>
                      <p align="justify"><strong>public String mode;</strong></p>
                      <p align="justify">if type is router, then recording mode. can be live, record, append</p>
                      <p align="justify"><strong>public boolean hasVideo;</strong></p>
                      <p align="justify">the stream transfers video data</p>
                      <p align="justify"><strong>public boolean hasAudio;</strong></p>
                      <p align="justify">the stream transfers audio data</p>
                      <p align="justify">Methods</p>
                      <p align="justify"><strong>public Stream ( StringnameX )</strong></p>
                      <p align="justify">creates a stream on local server under the given name</p>
                      <p align="justify"><strong>public Stream ( String nameX , Client clientX )</strong></p>
                      <p align="justify">creates a stream on remote server defined by clientX. </p>
                      <p align="justify"><strong>public void play ( String nameX ) </strong></p>
                      <p align="justify">starts playing the given stream. if given stream doesn't exist, it waits for its appereance. If stream name exists, starts playing immediately, and you can play it from clients/push it to other server. If stream name ends with &quot;.flv&quot;, it tries to play a recorded stream with that name from the default stream directory.</p>
                      <p align="justify"><strong>public void stop ( )</strong></p>
                      <p align="justify">stops playing the stream.</p>
                      <p align="justify"><strong>public void pause ( boolean stateX ) </strong></p>
                      <p align="justify">pauses/resumes stream playing</p>
                      <p align="justify"><strong>public void record ( boolean stateX )</strong></p>
                      <p align="justify">starts/stops recording the specific streams</p>
                      <p align="justify"><strong>public void delete ( )</strong></p>
                      <p align="justify">deletes the stream from the server, if its a live stream, its broadcasting is stopped</p>
                      <p align="justify"><strong>public void enable ( )</strong></p>
                      <p align="justify">enables a stream route/play request. if you have defined a stream event listener for a client, you have to enable/disable streams related to incoming events</p>
                      <p align="justify"><strong>public void disable ( )</strong></p>
                      <p align="justify">disables a stream route/play request, the client will receive a NetStream.Publish.Failed or NetStream.Play.Failed event. if you have defined a stream event listener for a client, you have to enabled/disable streams related to incoming events.</p>
                      <p align="justify"><strong>public void enableAudio ( boolean stateX )</strong></p>
                      <p align="justify">enables/disables audio transfer in the specific stream</p>
                      <p align="justify"><strong>public void enableVideo ( boolean stateX )</strong></p>
                      <p align="justify">enables/disables video transfer in the specific streams</p>
                      <p align="justify">Static mehods</p>
                      <p align="justify"><strong>public static ArrayList &lt; Stream &gt; getPlayers ( )</strong></p>
                      <p align="justify">returns an arraylist of all players available on the server</p>
                      <p align="justify"><strong>public static ArrayList &lt; Stream &gt; getRouters ( )</strong></p>
                      <p align="justify">returns an arraylist of all routers available on the server</p>
                    </blockquote>
                    <p><strong>3.5 Wrapper classes</strong></p>
                    <blockquote>
                      <p>Wrapper classes are a simple value wrappers, but most of your time programming Milenia Grafter Server you will use wrappers.<br />
                        As you know, java is a strictly typed language and actionscript is weakly typed. During data exchange flash can send objects and arrays containing mixed data types, and on the java side after deserialization we have to keep this state somehow in the strictly typed environment. That's why Wrapper class was born. AMF deserializer wraps data in Wrapper objects, and serializer uses Wrappers for input also.</p>
                      <p><strong>public class Wrapper </strong></p>
                      <p>wraps a java data type</p>
                      <p>Properties</p>
                      <p><strong>public String type</strong></p>
                      <p>contains the type of the wrapped value</p>
                      <p><strong>public double doubleValue</strong></p>
                      <p>the value of a wrapped double</p>
                      <p><strong>public String stringValue</strong></p>
                      <p>the value of a wrapped string</p>
                      <p><strong>public boolean booleanValue</strong></p>
                      <p>the value of a wrapped boolean</p>
                      <p><strong>public WrapperMap mapValue</strong></p>
                      <p>the value of a wrapped WrapperMap</p>
                      <p><strong>public WrapperList listValue</strong></p>
                      <p>the value of a wrapped WrapperList</p>
                      <p>Static properties</p>
                      <p><strong>public static final String MAP</strong></p>
                      <p>HashMap type identifier constant</p>
                      <p><strong>public static final String NULL</strong></p>
                      <p>Null type identifier constant</p>
                      <p><strong>public static final String LIST</strong></p>
                      <p>ArrayList type identifier constant</p>
                      <p><strong>public static final String DOUBLE</strong></p>
                      <p>Double type identifier constant</p>
                      <p><strong>public static final String STRING</strong></p>
                      <p>String type identifier constant</p>
                      <p><strong>public static final String BOOLEAN</strong></p>
                      <p>Boolean type identifier constant</p>
                      <p>Methods</p>
                      <p><strong>public Wrapper ( valueX )</strong></p>
                      <p>the constructor of Wrapper, accepts double, boolean, string, hashmap, arraylist <br />
                        as parameters, if it receives no parameter, then wrapped type will be null.</p>
                      <p><strong>public class WrapperList</strong></p>
                      <p>wraps an ArrayList of wrapper objects</p>
                      <p>Methods</p>
                      <p>public WrapperList ( )</p>
                      <p>public WrapperList ( Wrapper itemX ) </p>
                      <p>public WrapperList ( List &lt; Wrapper &gt; sourceX ) </p>
                      <p>public void add ( )</p>
                      <p>public void add ( String stringX )</p>
                      <p>public void add ( double doubleX )</p>
                      <p>public void add ( boolean booleanX )</p>
                      <p>public void add ( WrapperMap mapX )</p>
                      <p>public void add ( WrapperList listX ) </p>
                      <p>public String getType ( int indexX )</p>
                      <p>public String getString ( int indexX )</p>
                      <p>public double getDouble ( int indexX )</p>
                      <p>public boolean getBoolean ( int indexX )</p>
                      <p>public WrapperMap getMap ( int indexX )</p>
                      <p>public WrapperList getList ( int indexX ) </p>
                      <p>public class WrapperMap</p>
                      <p>wraps a HashMap of wrapper objects</p>
                      <p>Methods</p>
                      <p>public WrapperMap ( ) </p>
                      <p>public WrapperMap ( Map &lt; String , Wrapper &gt; sourceX ) </p>
                      <p>public WrapperMap ( String [ ] keysX , Object [ ] valuesX )</p>
                      <p>public void put ( String keyX )</p>
                      <p>public void put ( String keyX , String stringX )</p>
                      <p>public void put ( String keyX , double doubleX )</p>
                      <p>public void put ( String keyX , boolean booleanX )</p>
                      <p>public void put ( String keyX , WrapperMap mapX )</p>
                      <p>public void put ( String keyX , WrapperList listX )</p>
                      <p>public String getType ( String keyX )</p>
                      <p>public String getString ( String keyX )</p>
                      <p>public double getDouble ( String keyX )</p>
                      <p>public boolean getBoolean ( String keyX )</p>
                      <p>public WrapperMap getMap ( String keyX )</p>
                      <p>public WrapperList getList ( String keyX ) </p>
                    </blockquote>
                    <p><strong><a name="36" id="36"></a>3.6 InvokeEvent</strong></p>
                    <blockquote>
                      <p align="justify">InvokeEvent is an event information holder for invoke calls. It is dispatched by client instances. To watch for invoke events, first you have to create an instance of the EventListener class, and redefine its onEvent function where you define what to do with the event, then you have to add this eventlistener instance to a client by calling Client.addInvokeEventListener.</p>
                      <p align="justify">Properties </p>
                      <p align="justify"><strong>public String id</strong></p>
                      <p align="justify">identifier of the call, this is what you pass on the client side with NetConnection.call( identifier ... )</p>
                      <p align="justify"><strong>public Client client</strong></p>
                      <p align="justify">the client instance where this event is coming from</p>
                      <p align="justify"><strong>public WrapperList arguments</strong></p>
                      <p align="justify">the arguments related to this call</p>
                    </blockquote>
                    <p><strong><a name="37" id="37"></a>3.7 Stream Events</strong></p>
                    <blockquote>
                      <p align="justify">StreamEvent is an event information holder for stream events. It is dispatched by client instances To watch for stream events, first you have to create an instance of the EventListener class, and redefine its onEvent function where you define what to do with the event, then you have to add this eventlistener instance to a client by calling Client.addStreamEventListener.</p>
                      <p align="justify">Properties</p>
                      <p align="justify"><strong>public Client client</strong></p>
                      <p align="justify">the client instance where this event is coming from</p>
                      <p align="justify"><strong>public Stream stream</strong></p>
                      <p align="justify">the stream instance related to this stream. you may check the type of the instance first with Stream.type, then the name with Stream.name, then you have to enable or disable this request with Stream.enable( ) or Stream.disable( ). you can event store the stream instance, and enable/disable it later, the stream will be in idle state till that, and wont transfer any data.</p>
                    </blockquote>
                    <p><strong><a name="38" id="38"></a>3.8 Status Events</strong></p>
                    <blockquote>
                      <p>StatusEvent is an event information holder for client's status or stream events. It is dispatched by client instances To watch for status events, first you have to create an instance of the EventListener class, and redefine its onEvent function where you define what to do with the event, then you have to add this eventlistener instance to a client by calling Client.addStatusEventListener.</p>
                      <p>Properties</p>
                      <p><strong>public String code</strong></p>
                      <p>the code word for the actual event</p>
                      <p><strong>public Client client</strong></p>
                      <p>the client instance where this event is coming from</p>
                      <p><strong>public WrapperMap info</strong></p>
                      <p>the information map related to the event</p>
                      <p>Static Properties</p>
                      <p><strong>public static final String FAILURE</strong></p>
                      <p>connection failure event code word container. </p>
                      <p><strong>public static final String CLOSURE</strong></p>
                      <p>connection closure event code word container</p>
                      <p><strong>public static final String SUCCESS</strong></p>
                      <p>connection success event code word container. the info property of the event may <br />
                        contain additional information about the success in the &quot;application&quot; key</p>
                      <p><strong>public static final String REJECTION</strong></p>
                      <p>connection rejection event code word container. the info property of the event may contain additional information about the rejection in the &quot;application&quot; key</p>
                      <p><strong>public static final String PLAYSTART</strong></p>
                      <p>If client is pushing a stream to a remote server, this is the event code word for a succesful play start</p>
                      <p>public static final String PLAYRESET</p>
                      <p>public static final String PLAYFAILED</p>
                      <p>public static final String PUBLISHSTART</p>
                      <p>public static final String RECORDNOACCESS</p>
                      <p>public static final String UNPUBLISHSUCCESS</p>
                    </blockquote>
                    <p><strong><a name="39" id="39"></a>3.9 Utilities</strong></p>
                    <blockquote>
                      <p>Timer - com.milgra.server.api.Timer</p>
                      <p>Simple timer. You have to define an EventListener first, then instantiate the timer with an arbitray interval in milliseconds, and the eventlistener. For example:</p>
                      <p>LogWriter - com.milgra.server.util.LogWriter</p>
                      <p>Log writer. Instantiate it with the log file name, then call addLog( String log ) to add new entry. Close it with close( ). Example:</p>
                    </blockquote>
                  </blockquote>
                  <p><strong><a name="4" id="4"></a>4. Extra Documentation</strong></p>
                  <blockquote>
                    <p><strong><a name="41" id="41"></a>4.1 How to create a Custom Application?</strong></p>
                    <blockquote>
                      <p align="justify">Donwload and unzip Milenia Grafter Server. Download and install the latest Eclipse for you platform. Ensure that you have JRE 1.5 or higher on your system, and JRE executables are in the execution path.<br />
                        <br />
                        Start Eclipse. File menuitem -&gt; New -&gt; Project, select Java project, click Next, type your desired project name as project name. If JRE 1.5 is not the default, select it under JRE. Click next. For default output folder, type YourProjectName/bin , so Eclipse will compile classes under a separate &quot;bin&quot; directory, and it will be easier for us to pack our classes into jar. Click on libraries tab, click Add External JARs, choose Milenia Grafter's folder, and select milenia.jar, click Open. That's all for project setup, click Finish.</p>
                      <p align="justify">YourProjectName project appeared in Package Explorer. File menuitem -&gt; New -&gt; Class.For class name, type Application ( first letter uppercase ), and in the package field, type application ( all lowercase ). Every main custom application class must be application.Application. Click finish.<br />
                        <br />
                        The class is created. Every main application class must implement Milenia Grafter's IApplication interface. So, under package name type &quot;import com.milgra.server.IApplication;&quot;<br />
                        <br />
                        Now you have to create the three implemented functions: onEnter, onLeave, onClose, and add wanted functionality. If Eclipse shows no compiler errors/warnings, you are ready to pack your application into jar.<br />
                        <br />
                        Open a terminal, go in your Eclipse workspace directory, go under YourProject/bin. You see an &quot;application&quot; directory, where eclipse compiled our application classes. Type </p>
                      <p align="justify"><em>                        jar -cf yourappname.jar application</em></p>
                      <p align="justify">And a yourappname.jar file appears in the directory. Copy this file under Milenia Grafter Server/applications. Start the server if it's not running, or load the application with MilGraAdmin under applications tab. ( refresh - load ). The application is ready to use.</p>
                      <p align="justify">Check ut the sources of MilGraUnit, everything is there you want to use in your app deployment.</p>
                    </blockquote>
                    <p><strong><a name="42" id="42"></a>4.2 How to embed Milenia in my application package?</strong></p>
                    <blockquote>
                      <p>You can easily embed the server in your package, simply set Library values to your hearts content, then instantiate the server, like its in Server class main function. There is also a shutdown hook in Server class, called shutdown, it kills the server and cleans up everything.</p>
                    </blockquote>
                    <p><strong><a name="43" id="43"></a>4.3 How to modify/develop Milenia Grafter?</strong></p>
                    <blockquote>
                      <p>Under construction.</p>
                    </blockquote>
                  </blockquote>
              </blockquote>                </td>
            </tr>
            <tr>
              <td background="images/verticallogobottom.jpg"> </td>
            </tr>
          </tbody>
        </table></td>
      <td> </td>
    </tr>
  </tbody>
</table>
</body>
</html>
